{"version":3,"file":"client.js","sources":["../helpers/general.js","../template/client.js"],"sourcesContent":["import _ from 'lodash';\nexport function camelCase(string) {\n    return _.camelCase(string);\n}\nexport function pascalCase(string) {\n    string = _.camelCase(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport function kebabCase(string) {\n    return _.kebabCase(string);\n}\n","\nimport { AsyncAPIDocument } from '@asyncapi/parser';\nimport {pascalCase} from '../helpers/general';\nimport { File } from '@asyncapi/generator-react-sdk';\n\n/**\n * @typedef RenderArgument\n * @type {object}\n * @property {AsyncAPIDocument} asyncapi received from the generator.\n * @property {TemplateParameters} params received from the generator.\n */\n/**\n * Function to render file.\n * \n * @param {RenderArgument} param0 render arguments received from the generator.\n */\nexport default function index({ asyncapi, params }) {\n  let channelWrappers = [];\n  const channelEntries = Object.keys(asyncapi.channels()).length ? Object.entries(asyncapi.channels()) : [];\n  channelWrappers = channelEntries.map(([channelName, channel]) => {\n    return `\nstatic say${pascalCase(channelName)}(target, payload, cb) {\n  var client = new glee_proto.Greeter(target, credentials.createInsecure());\n  client.say${pascalCase(channelName)}(payload, cb);\n}\n    `;\n  });\n  return (\n    <File name=\"client.js\">\n      {`\nvar PROTO_PATH = import.meta.url.replace('client.js', '').replace('file:', '') + './proto/glee.proto';\nimport { loadPackageDefinition, credentials } from '@grpc/grpc-js';\nimport { loadSync } from '@grpc/proto-loader';\nvar packageDefinition = loadSync(\n  PROTO_PATH,\n  {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true\n  });\nvar glee_proto = loadPackageDefinition(packageDefinition).asyncapi.glee;\nexport const servers = {\n  java: 'localhost:50051'\n}\nexport class gRPCClient {\n  ${channelWrappers.join('')}\n}\n`}\n    </File>\n  );\n}\n\n"],"names":["pascalCase","string","_","camelCase","charAt","toUpperCase","slice","index","asyncapi","params","channelWrappers","channelEntries","Object","keys","channels","length","entries","map","channelName","channel","_jsx","File","join"],"mappings":";;;;;;;;;;;;AAIO,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC/BA,EAAAA,MAAM,GAAGC,qBAAC,CAACC,SAAF,CAAYF,MAAZ,CAAT;AACA,SAAOA,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCJ,MAAM,CAACK,KAAP,CAAa,CAAb,CAAxC;AACH;;ACSc,SAASC,KAAT,CAAe;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAf,EAAqC;AAClD,MAAIC,eAAe,GAAG,EAAtB;AACA,QAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYL,QAAQ,CAACM,QAAT,EAAZ,EAAiCC,MAAjC,GAA0CH,MAAM,CAACI,OAAP,CAAeR,QAAQ,CAACM,QAAT,EAAf,CAA1C,GAAgF,EAAvG;AACAJ,EAAAA,eAAe,GAAGC,cAAc,CAACM,GAAf,CAAmB,CAAC,CAACC,WAAD,EAAcC,OAAd,CAAD,KAA4B;AAC/D,WAAQ;AACZ,YAAYnB,UAAU,CAACkB,WAAD,CAAc;AACpC;AACA,cAAclB,UAAU,CAACkB,WAAD,CAAc;AACtC;AACA,KALI;AAMD,GAPiB,CAAlB;AAQA,sBACEE,eAACC,sBAAD;AAAM,IAAA,IAAI,EAAC,WAAX;AAAA,cACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIX,eAAe,CAACY,IAAhB,CAAqB,EAArB,CAAyB;AAC7B;AACA;AArBI,IADF;AAyBD;;;;"}